---
import fs from "fs";
import Layout from "../layouts/Layout.astro";
import path from "path";

export function getStaticPaths() {
  const propsFromFilename = (filename: string) => {
    const propsPath = `public/swfs/${path.basename(filename, ".swf")}.json`;
    if (fs.existsSync(propsPath)) {
      return JSON.parse(fs.readFileSync(propsPath, "utf-8"));
    }
    return { bgColor: "white" };
  };
  return fs.readdirSync("public/swfs").filter(file => file.endsWith(".swf")).map(file => {
    return { params: { swf: file }, props: propsFromFilename(file) };
  });
}
const { swf, name } = Astro.params;
const { bgColor } = Astro.props;

interface RufflePlayer extends HTMLElement {
  load: (url: string) => void;
}
declare const window: Window & {
  RufflePlayer?: Partial<{
    newest: () => {
      createPlayer: () => RufflePlayer;
    };
    config: {
      publicPath: string;
    };
  }>;
};
---

<script src="/swf-port/ruffle/ruffle.js" is:inline></script>
<script>
  window.RufflePlayer = window.RufflePlayer || {};
  window.RufflePlayer.config = { publicPath: "/swf-port/ruffle/" };
  window.addEventListener("load", event => {
    const ruffle = window.RufflePlayer.newest();
    const player = ruffle.createPlayer();
    const container = document.getElementById("ruffle-main");
    container.appendChild(player);
    player.load(`/swf-port/swfs/${container.dataset.href}`);
  });
</script>
<Layout title={bgColor} bgColor={bgColor}>
  <div id="ruffle-main" class="ruffle-cont" data-href={swf}></div>
</Layout>
<style>
    body {
        margin: 0;
        padding: 0;
    }

    .ruffle-cont {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
</style>

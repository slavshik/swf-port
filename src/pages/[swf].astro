---
import fs from "fs";
import Layout from "../layouts/Layout.astro";
export function getStaticPaths() {
    return fs.readdirSync("public/swfs").map(file => {
        return {params: {swf: file, name: Math.random()}};
    });
}
const {swf, name} = Astro.params;
interface RufflePlayer extends HTMLElement {
    load: (url: string) => void;
}
declare const window: Window & {
    RufflePlayer?: Partial<{
        newest: () => {
            createPlayer: () => RufflePlayer;
        };
        config: {
            publicPath: string;
        };
    }>;
};
---

<script src="/swf-port/ruffle/ruffle.js" is:inline></script>
<script>
    window.RufflePlayer = window.RufflePlayer || {};
    window.RufflePlayer.config = {publicPath: "/swf-port/ruffle/"};
    window.addEventListener("load", event => {
        const ruffle = window.RufflePlayer.newest();
        const player = ruffle.createPlayer();
        const container = document.getElementById("ruffle-main");
        container.appendChild(player);
        player.load(`/swf-port/swfs/${container.dataset.href}`);
    });
</script>
<Layout title={name}>
    <div id="ruffle-main" class="ruffle-cont" data-href={swf}></div>
</Layout>
<style>
    body {
        margin: 0;
        padding: 0;
    }
    .ruffle-cont {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }
</style>
